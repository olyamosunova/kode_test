{"version":3,"sources":["const.js","components/FormLogin/FormLogin.js","components/FormSmsCode/FormSmsCode.js","components/Authorization/Authorization.js","components/Header/Header.js","components/Loader/Loader.js","components/ErrorBlock/cry.gif","components/ErrorBlock/ErrorBlock.js","components/CardDetail/CardDetail.js","components/Select/Select.js","components/CardItem/CardItem.js","components/ModalCard/ModalCard.js","utils.js","components/Cards/Cards.js","components/App/App.js","index.js"],"names":["AuthorizationStatus","ERROR_MESSAGES","FORM_NAME","POKEMON_API_KEY","FormLogin","isAuthorizationSuccess","submitForm","handleChange","errors","useState","formError","setFormError","useEffect","className","cx","onSubmit","evt","name","type","placeholder","onChange","FormSmsCode","Authorization","onLoginFormSubmit","onCodeFormSubmit","serverError","setIsAuthorizationSuccess","showCodeForm","setShowCodeForm","fields","state","setState","prevState","handleValidation","formName","formIsValid","login","password","code","codeSubmit","a","preventDefault","target","value","alert","Header","isBackLink","history","useHistory","onClick","goBack","to","Loader","CircularProgress","color","ErrorBlock","message","src","gif","alt","CardDetail","cardId","useParams","data","setData","isLoaded","setIsLoaded","setServerError","pokemon","configure","apiKey","card","find","then","catch","finally","images","large","supertype","types","join","subtypes","attacks","length","map","item","flavorText","Select","title","items","onSelect","activeItem","selectOpened","setSelectOpened","selectValue","setSelectValue","filteredItems","setFilteredItems","searchInputEl","useRef","selectEl","document","addEventListener","current","contains","ref","onInput","toLowerCase","newItems","filter","indexOf","handlerSearch","CardItem","handlerClickCard","tabIndex","small","artist","stopPropagation","id","ModalCard","handlerCloseModal","ModalWrapper","modalShow","setModalShow","getQueryForCards","subtype","setSearchParams","currentType","currentSubtype","currentPage","page","Cards","query","URLSearchParams","location","search","cards","setCards","pokemonTypes","setPokemonTypes","pokemonSubtypes","setPokemonSubtypes","get","chosenType","setChosenType","chosenSubtype","setChosenSubtype","pageCount","setPageCount","activePage","setActivePage","activeModal","setActiveModal","all","where","pageSize","response","Math","round","totalCount","q","push","Pagination","count","showFirstButton","showLastButton","App","localStorage","getItem","authorizationStatus","setAuthorizationStatus","loginHandler","checkCode","OTR","Promise","resolve","reject","setTimeout","err","console","error","smsCodeHandler","setItem","exact","path","render","removeItem","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e319f5ef.chunk.js","sourcesContent":["export const AuthorizationStatus = {\r\n    NO_AUTH: `NO_AUTH`,\r\n    AUTH: `AUTH`,\r\n};\r\n\r\nexport const ERROR_MESSAGES = {\r\n    empty_field: 'Поле должно быть заполнено.',\r\n    incorrect_authorization: 'Неверный логин или пароль.',\r\n    incorrect_sms_code: 'Неверный код'\r\n};\r\n\r\nexport const FORM_NAME = {\r\n    LOGIN: 'LOGIN',\r\n    CODE: 'CODE'\r\n};\r\n\r\nexport const POKEMON_API_KEY = '1cf24b30-3606-41ab-9abd-fc96dbcd39bf';\r\n","import React, {useEffect, useState} from 'react';\r\nimport { ERROR_MESSAGES } from '../../const';\r\nimport cx from 'classnames';\r\n\r\nconst FormLogin = ({ isAuthorizationSuccess, submitForm, handleChange, errors }) => {\r\n    const [formError, setFormError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (errors['login'] || errors['password'] || !isAuthorizationSuccess) {\r\n            setFormError(true);\r\n        }\r\n    }, [errors]);\r\n\r\n    const handlerSubmitForm = (evt) => {\r\n        setFormError(false);\r\n        submitForm(evt);\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className={ cx(\"form\", { \"form--error\": formError }) }\r\n            onSubmit={ handlerSubmitForm }\r\n        >\r\n            { !isAuthorizationSuccess && <p className=\"form__error\">{ ERROR_MESSAGES.incorrect_authorization }</p> }\r\n\r\n            <div className=\"form__block\">\r\n                <label className={ errors[\"login\"] && \"is-invalid\" }>\r\n                    <span>Login</span>\r\n                    <input\r\n                        name=\"login\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter login\"\r\n                        onChange={ handleChange }\r\n                    />\r\n                </label>\r\n                { errors[\"login\"] && <div className=\"form__block-error\">{ errors[\"login\"] }</div> }\r\n            </div>\r\n\r\n            <div className=\"form__block\">\r\n                <label className={ errors[\"password\"] && \"is-invalid\" }>\r\n                    <span>Login</span>\r\n                    <input\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        onChange={ handleChange }\r\n                    />\r\n                </label>\r\n\r\n                { errors[\"password\"] && <div className=\"form__block-error\">{ errors[\"password\"] }</div> }\r\n            </div>\r\n\r\n            <button className=\"button\" type=\"submit\">Log in</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FormLogin;\r\n","import React, {useEffect, useState} from 'react';\r\nimport cx from 'classnames';\r\n\r\nconst FormSmsCode = ({ handleChange, submitForm, errors }) => {\r\n    const [formError, setFormError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (errors['code']) {\r\n            setFormError(true);\r\n        }\r\n    }, [errors]);\r\n\r\n    const handlerSubmitForm = (evt) => {\r\n        setFormError(false);\r\n        submitForm(evt);\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className={ cx(\"form\", { \"form--error\": formError }) }\r\n            onSubmit={ handlerSubmitForm }\r\n        >\r\n            <div className=\"form__block\">\r\n                <label className={ errors[\"code\"] && \"is-invalid\" }>\r\n                    <span>Code from SMS</span>\r\n                    <input\r\n                        name=\"code\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter code\"\r\n                        onChange={ handleChange }\r\n                    />\r\n                </label>\r\n                { errors[\"code\"] && <div className=\"form__block-error\">{ errors[\"code\"] }</div> }\r\n            </div>\r\n\r\n            <button className=\"button\" type=\"submit\">Send</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FormSmsCode;\r\n","import React, {useEffect, useState} from 'react';\r\nimport FormLogin from '../FormLogin/FormLogin';\r\nimport './Authorization.css';\r\nimport FormSmsCode from '../FormSmsCode/FormSmsCode';\r\nimport { ERROR_MESSAGES, FORM_NAME } from '../../const';\r\n\r\nconst Authorization = ({ onLoginFormSubmit, onCodeFormSubmit, serverError }) => {\r\n    const [isAuthorizationSuccess, setIsAuthorizationSuccess] = useState(true);\r\n    const [showCodeForm, setShowCodeForm] = useState(false);\r\n\r\n    const [state, setState] = useState({\r\n        fields: {},\r\n        errors: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (serverError) {\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                errors: {}\r\n            }))\r\n        }\r\n    }, [serverError]);\r\n\r\n    const handleValidation = (formName) => {\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        switch (formName) {\r\n            case FORM_NAME.LOGIN:\r\n                if (!state.fields.login) {\r\n                    formIsValid = false;\r\n                    errors['login'] = ERROR_MESSAGES.empty_field;\r\n                }\r\n\r\n                if (!state.fields.password) {\r\n                    formIsValid = false;\r\n                    errors['password'] = ERROR_MESSAGES.empty_field;\r\n                }\r\n\r\n                break;\r\n\r\n            case FORM_NAME.CODE:\r\n                if (!state.fields.code) {\r\n                    formIsValid = false;\r\n                    errors['code'] = ERROR_MESSAGES.empty_field;\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setState({ ...state, errors: errors });\r\n        return formIsValid;\r\n    };\r\n\r\n    const loginSubmit = (evt) => {\r\n        evt.preventDefault();\r\n\r\n        if (handleValidation(FORM_NAME.LOGIN)) {\r\n            if (onLoginFormSubmit(state.fields)) {\r\n                setShowCodeForm(true);\r\n                alert('Valid SMS code: 123456');\r\n            } else {\r\n                setIsAuthorizationSuccess(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const codeSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n\r\n        if(handleValidation(FORM_NAME.CODE)) {\r\n            const isValidCode = await onCodeFormSubmit(state.fields.login, state.fields.code);\r\n\r\n            if (!isValidCode) {\r\n                setState({ ...state, errors: {\r\n                        code: ERROR_MESSAGES.incorrect_sms_code\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleChange = (evt) => {\r\n        let fields = state.fields;\r\n        fields[evt.target.name] = evt.target.value;\r\n        setState({ fields, errors: {\r\n                ...state.errors,\r\n                [evt.target.name]: null\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"container\">\r\n                { serverError && <p className=\"text-danger\">Ошибка сервера: {serverError}</p> }\r\n\r\n                { showCodeForm\r\n                    ? <FormSmsCode handleChange={ handleChange } submitForm={ codeSubmit } errors={ state.errors } />\r\n                    : <FormLogin isAuthorizationSuccess={ isAuthorizationSuccess } handleChange={ handleChange } submitForm={ loginSubmit } errors={ state.errors } />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Authorization;\r\n","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nconst Header = ({ isBackLink = false }) => {\r\n    let history = useHistory();\r\n\r\n    const handlerClickBack = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <div className=\"header__nav\">\r\n                    { isBackLink && <button type=\"button\" onClick={ handlerClickBack }>&lt; Back</button> }\r\n\r\n                    <Link className=\"ml-auto\" to=\"/logout\">Logout</Link>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <CircularProgress color=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","export default __webpack_public_path__ + \"static/media/cry.f7c602c9.gif\";","import React from 'react';\r\nimport gif from './cry.gif';\r\nimport './ErrorBlock.css';\r\n\r\nconst ErrorBlock = ({ message }) => {\r\n    return (\r\n        <div className=\"error-block\">\r\n            <p>{ message }</p>\r\n\r\n            <img src={ gif } alt=\"sticker\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorBlock;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport pokemon from 'pokemontcgsdk';\r\nimport Header from '../Header/Header';\r\nimport Loader from '../Loader/Loader';\r\nimport ErrorBlock from '../ErrorBlock/ErrorBlock';\r\nimport { POKEMON_API_KEY } from '../../const';\r\nimport './CardDetail.css';\r\n\r\nconst CardDetail = () => {\r\n    let { cardId } = useParams();\r\n    const [data, setData] = useState({});\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    pokemon.configure({ apiKey: POKEMON_API_KEY });\r\n\r\n    useEffect(() => {\r\n        pokemon.card.find(cardId)\r\n            .then(card => {\r\n                setData(card);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            })\r\n            .finally(() => {\r\n                setIsLoaded(true);\r\n            });\r\n    }, [cardId]);\r\n\r\n    return (\r\n        <>\r\n            <Header isBackLink={ true } />\r\n                { !isLoaded\r\n                    ?\r\n                    <Loader />\r\n                    :\r\n                    <>\r\n                        { serverError\r\n                            ? <ErrorBlock\r\n                                message=\"Не удалось загрузить детальную информацию. Попробуйте перезагрузить страницу.\"\r\n                            />\r\n                            :\r\n                            <main>\r\n                                <div className=\"container\">\r\n                                    <div className=\"card-detail\">\r\n                                        <p className=\"card-detail__title\">{ data.name }</p>\r\n\r\n                                        <div className=\"card-detail__block\">\r\n                                            <div className=\"card-detail__image\">\r\n                                                <img src={ data.images?.large } alt={ data.name } />\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                        <div className=\"card-detail__block\">\r\n                                            <div className=\"card-detail__info\">\r\n                                                <p>Pokemon name: <b>{ data.name }</b></p>\r\n                                                <p>Supertype: <b>{ data.supertype }</b></p>\r\n                                                <p>Types: <b>{ data.types?.join(', ') }</b></p>\r\n                                                <p>Subtypes: <b>{ data.subtypes?.join(', ') }</b></p>\r\n                                            </div>\r\n\r\n                                            { data.attacks?.length && (\r\n                                                <div className=\"card-detail__info\">\r\n                                                    <ul>\r\n                                                        { data.attacks?.map(item => (\r\n                                                            <li key={ item.name }><b>{ item.name }</b></li>\r\n                                                        ))}\r\n                                                    </ul>\r\n                                                </div>\r\n                                            )}\r\n\r\n                                            <p className=\"card-detail__description\">{ data.flavorText }</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </main>\r\n                        }\r\n                    </>\r\n                }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardDetail;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport cx from 'classnames';\r\nimport './Select.css';\r\n\r\nconst Select = ({title = 'Type', items = [], onSelect, activeItem = ''}) => {\r\n    const [selectOpened, setSelectOpened] = useState(false);\r\n    const [selectValue, setSelectValue] = useState(activeItem);\r\n    const [filteredItems, setFilteredItems] = useState(items);\r\n    const searchInputEl = useRef();\r\n    const selectEl = useRef();\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (evt) => {\r\n            if(selectEl.current && !selectEl.current.contains(evt.target)) {\r\n                setSelectOpened(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('click', handleClickOutside);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setFilteredItems(items);\r\n        searchInputEl.current.value = '';\r\n    }, [selectOpened]);\r\n\r\n    const handlerOpenSelect = () => {\r\n        setSelectOpened(!selectOpened);\r\n    };\r\n\r\n    const handlerChooseItem = (value) => {\r\n        if(selectValue === value) {\r\n            setSelectValue('');\r\n        } else {\r\n            setSelectValue(value);\r\n        }\r\n\r\n        setSelectOpened(false);\r\n        onSelect(selectValue === value ? '' : value);\r\n    };\r\n\r\n    const handlerSearch = (evt) => {\r\n        const value = evt.target.value.toLowerCase();\r\n        const newItems = items.filter(item => item.toLowerCase().indexOf(value) > -1);\r\n\r\n        if (value !== '') {\r\n            setFilteredItems(newItems);\r\n        } else {\r\n            setFilteredItems(items);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div ref={selectEl} className={cx('select my-5', {'select--open': selectOpened})}>\r\n            <div className=\"select__header\" onClick={handlerOpenSelect}>\r\n                <span>{ selectValue ? selectValue : title }</span>\r\n\r\n            </div>\r\n            <div className=\"select__body\">\r\n                <div className=\"select__search\">\r\n                    <input ref={searchInputEl} onInput={(evt) => handlerSearch(evt)} placeholder=\"Type something...\" />\r\n                </div>\r\n                <div className=\"select__list\">\r\n                    { filteredItems.map(item => (\r\n                        <a\r\n                            key={item}\r\n                            className={cx('select__item', {'select__item--active': item === selectValue})}\r\n                            onClick={() => handlerChooseItem(item)}\r\n                        >{ item }</a>\r\n                    )) }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport cx from 'classnames';\r\nimport './CardItem.css';\r\n\r\nconst CardItem = ({ className, card, handlerClickCard }) => {\r\n    const handlerClickDetail = (evt) => {\r\n        evt.stopPropagation();\r\n    };\r\n\r\n    return (\r\n        <div className={ cx(className, { 'card-item': true }) } tabIndex={0} onClick={ handlerClickCard } >\r\n            <div className=\"card-item__image\">\r\n                <img src={ card.images?.small } alt={ card.name } />\r\n            </div>\r\n\r\n            <div className=\"card-item__info\">\r\n                <p>{ card.name }</p>\r\n                <p> { card.artist }</p>\r\n            </div>\r\n\r\n            <div className=\"card-item__controls\">\r\n                <Link onClick={ handlerClickDetail } to={ `/cards/${ card.id }` } className=\"card-item__button\">\r\n                    Go to detail page\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardItem;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport cx from 'classnames';\r\nimport './ModalCard.css';\r\n\r\nconst ModalCard = ({ card, handlerCloseModal }) => {\r\n    const { name, images } = card;\r\n\r\n    const ModalWrapper = useRef();\r\n\r\n    const [modalShow, setModalShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setModalShow(true);\r\n\r\n        const handleClickOutside = (evt) => {\r\n            if(ModalWrapper.current && !ModalWrapper.current.contains(evt.target)) {\r\n                setModalShow(false);\r\n                handlerCloseModal();\r\n            }\r\n        };\r\n\r\n        document.addEventListener('click', handleClickOutside);\r\n    }, []);\r\n\r\n  return (\r\n      <div className=\"modal-card\">\r\n          <div\r\n              className={ cx(\"modal-card__wrapper\", { \"modal-card__wrapper--show\": modalShow }) }\r\n              ref={ ModalWrapper }\r\n          >\r\n              <div className=\"modal-card__header\">\r\n                  <p className=\"modal-card__title\">{ name }</p>\r\n                  <button className=\"modal-card__close\" type=\"button\" onClick={ handlerCloseModal }>\r\n                      <span>Close modal</span>\r\n                  </button>\r\n              </div>\r\n              <div className=\"modal-card__body\">\r\n                  <img src={ images.large } alt={ name } />\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ModalCard;\r\n","export const getQueryForCards = (type, subtype) => {\r\n    return type && subtype\r\n        ? `types:${type} subtypes:${subtype}`\r\n        : type ? `types:${type}` :  subtype && `subtypes:${subtype}`;\r\n};\r\n\r\nexport const setSearchParams = (currentType, currentSubtype, currentPage) => {\r\n    const type = currentType && `type=${currentType}&`;\r\n    const subtype = currentSubtype && `subtype=${currentSubtype}&`;\r\n    const page = currentPage && `page=${currentPage}`;\r\n\r\n    return `?${type}${subtype}${page}`;\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport pokemon from 'pokemontcgsdk';\r\nimport cx from 'classnames';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Header from '../Header/Header';\r\nimport Loader from '../Loader/Loader';\r\nimport Select from '../Select/Select';\r\nimport CardItem from '../CardItem/CardItem';\r\nimport ModalCard from '../ModalCard/ModalCard';\r\nimport ErrorBlock from '../ErrorBlock/ErrorBlock';\r\nimport { getQueryForCards, setSearchParams } from '../../utils';\r\nimport { POKEMON_API_KEY } from '../../const';\r\nimport './Cards.css';\r\n\r\nconst Cards = () => {\r\n    let history = useHistory();\r\n    const query = new URLSearchParams(history.location.search);\r\n\r\n    pokemon.configure({ apiKey: POKEMON_API_KEY });\r\n\r\n    const [cards, setCards] = useState([]);\r\n    const [pokemonTypes, setPokemonTypes] = useState([]);\r\n    const [pokemonSubtypes, setPokemonSubtypes] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [chosenType, setChosenType] = useState(query.get('type') ?? '');\r\n    const [chosenSubtype, setChosenSubtype] = useState(query.get('subtype') ?? '');\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [activePage, setActivePage] = useState(query.get('page') ? +query.get('page') : 1);\r\n    const [activeModal, setActiveModal] = useState(null);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        pokemon.type.all()\r\n            .then(types => {\r\n                setPokemonTypes(types);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            });\r\n\r\n        pokemon.subtype.all()\r\n            .then(subtypes => {\r\n                setPokemonSubtypes(subtypes);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            });\r\n\r\n        pokemon.card.where({ pageSize: 4, page: 1 })\r\n            .then(response => {\r\n                setCards(response.data);\r\n                setPageCount(Math.round(response.totalCount / response.pageSize));\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            })\r\n            .finally(() => setIsLoaded(true));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let query = getQueryForCards(chosenType, chosenSubtype);\r\n        setIsLoaded(false);\r\n\r\n        pokemon.card.where({ pageSize: 4, page: 1, q: query })\r\n            .then(response => {\r\n                setCards(response.data);\r\n                setPageCount(Math.round(response.totalCount / response.pageSize));\r\n                setActivePage(1);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            })\r\n            .finally(() => setIsLoaded(true));\r\n\r\n        history.push(`/cards${ setSearchParams(chosenType, chosenSubtype, activePage) }`);\r\n    }, [chosenType, chosenSubtype]);\r\n\r\n    useEffect(() => {\r\n        let query = getQueryForCards(chosenType, chosenSubtype);\r\n        setIsLoaded(false);\r\n\r\n        pokemon.card.where({ pageSize: 4, page: activePage, q: query })\r\n            .then(response => {\r\n                setCards(response.data);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            })\r\n            .finally(() => setIsLoaded(true));\r\n\r\n        history.push(`/cards${ setSearchParams(chosenType, chosenSubtype, activePage) }`);\r\n    }, [activePage]);\r\n\r\n    const handlerPageClick = (evt, currentPage) => {\r\n        evt.preventDefault();\r\n        setActivePage(currentPage);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <main className={ cx({ 'hidden': activeModal }) }>\r\n                <div className=\"container\">\r\n                    <>\r\n                        { serverError\r\n                            ? <ErrorBlock\r\n                                message=\"Не удалось загрузить карточки. Попробуйте перезагрузить страницу.\"\r\n                            />\r\n                            :\r\n                            <div className=\"cards\">\r\n                                <div className=\"cards__filter\">\r\n                                    <Select\r\n                                        title=\"Type\"\r\n                                        items={ pokemonTypes }\r\n                                        onSelect={ (value) => setChosenType(value) }\r\n                                        activeItem={ chosenType }\r\n                                    />\r\n\r\n                                    <Select\r\n                                        title=\"Subtype\"\r\n                                        items={ pokemonSubtypes }\r\n                                        onSelect={ (value) => setChosenSubtype(value) }\r\n                                        activeItem={ chosenSubtype }\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"cards__wrapper\">\r\n                                    { !isLoaded\r\n                                        ?  <Loader />\r\n                                        :\r\n                                        <>\r\n                                            <div className=\"cards__list\">\r\n                                                { cards.map(card => (\r\n                                                    <CardItem\r\n                                                        className=\"cards__item\"\r\n                                                        key={ card.id }\r\n                                                        card={ card }\r\n                                                        handlerClickCard={ () => setActiveModal(card) }\r\n                                                    />\r\n                                                ))}\r\n\r\n                                                { !cards.length && <p>Pokemons not found by this filter</p> }\r\n                                            </div>\r\n\r\n                                            { pageCount > 1 && (\r\n                                                <Pagination\r\n                                                    page={ activePage }\r\n                                                    onChange={ handlerPageClick }\r\n                                                    count={ pageCount }\r\n                                                    showFirstButton showLastButton\r\n                                                />\r\n                                            ) }\r\n                                        </>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </>\r\n                </div>\r\n\r\n                { activeModal && (\r\n                    <ModalCard card={ activeModal } handlerCloseModal={ () => setActiveModal(null) } />\r\n                ) }\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React, {useState} from 'react';\r\nimport { HashRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\r\nimport Authorization from '../Authorization/Authorization';\r\nimport CardDetail from '../CardDetail/CardDetail';\r\nimport Cards from '../Cards/Cards';\r\nimport { AuthorizationStatus } from '../../const';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    const [authorizationStatus, setAuthorizationStatus] = useState(\r\n        localStorage.getItem('pokemonAuthorization') ? AuthorizationStatus.AUTH : AuthorizationStatus.NO_AUTH\r\n    );\r\n\r\n    const [serverError, setServerError] = useState(null);\r\n\r\n    const loginHandler = ({ login, password }) => {\r\n        return login === 'kode@kode.ru' && password === 'Enk0deng';\r\n    };\r\n\r\n    const checkCode = async () => {\r\n        let code = null;\r\n\r\n        let OTR = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                resolve({ data: '123456' });\r\n                // reject(\"Server error\");\r\n            }, 250);\r\n        });\r\n\r\n        await OTR.then(response => {\r\n            code = response.data;\r\n            setServerError(null);\r\n        })\r\n            .catch(err => {\r\n                console.error(err);\r\n                setServerError(err);\r\n            });\r\n\r\n        return code;\r\n    };\r\n\r\n    const smsCodeHandler = async (login, code) => {\r\n        let getCode = await checkCode(code);\r\n\r\n        if (getCode === code) {\r\n            localStorage.setItem('pokemonAuthorization', login);\r\n            setAuthorizationStatus(AuthorizationStatus.AUTH);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const renderLogoutPage = () => {\r\n        localStorage.removeItem('pokemonAuthorization');\r\n        setAuthorizationStatus(AuthorizationStatus.NO_AUTH);\r\n\r\n        return <Redirect to='/' />;\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/\"\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Redirect to=\"/login\" />\r\n                                : <Redirect to=\"/cards\" />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/login'\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Authorization\r\n                                    onLoginFormSubmit={ loginHandler }\r\n                                    onCodeFormSubmit={ smsCodeHandler }\r\n                                    serverError={ serverError }\r\n                                />\r\n                                : <Redirect to='/cards' />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/logout'\r\n                        render={ renderLogoutPage }\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/cards'\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Redirect to='/login' />\r\n                                : <Cards />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/cards/:cardId'\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Redirect to='/login' />\r\n                                : <CardDetail />;\r\n                        }}\r\n                    />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}