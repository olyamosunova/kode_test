{"version":3,"sources":["const.js","components/FormLogin/FormLogin.js","components/FormSmsCode/FormSmsCode.js","components/Authorization/Authorization.js","components/Loader/Loader.js","components/Select/Select.js","components/CardItem/CardItem.js","components/ModalCard/ModalCard.js","utils.js","components/ErrorBlock/ErrorBlock.js","components/Cards/Cards.js","components/Header/Header.js","components/Main/Main.js","components/CardDetail/CardDetail.js","components/App/App.js","index.js"],"names":["AuthorizationStatus","ERROR_MESSAGES","FORM_NAME","POKEMON_API_KEY","FormLogin","isAuthorizationSuccess","submitForm","handleChange","errors","className","onSubmit","name","type","placeholder","onChange","FormSmsCode","Authorization","onLoginFormSubmit","onCodeFormSubmit","serverError","useState","setIsAuthorizationSuccess","showCodeForm","setShowCodeForm","fields","state","setState","useEffect","prevState","handleValidation","formName","formIsValid","login","password","code","codeSubmit","evt","a","preventDefault","target","value","alert","Loader","CircularProgress","color","Select","title","items","onSelect","activeItem","selectOpened","setSelectOpened","selectValue","setSelectValue","filteredItems","setFilteredItems","searchInputEl","useRef","selectEl","document","addEventListener","current","contains","ref","cx","onClick","onInput","toLowerCase","newItems","filter","item","indexOf","handlerSearch","map","CardItem","card","handlerClickCard","tabIndex","src","images","small","alt","artist","stopPropagation","to","id","ModalCard","handlerCloseModal","ModalWrapper","modalShow","setModalShow","large","getQueryForCards","subtype","setSearchParams","currentType","currentSubtype","currentPage","page","ErrorBlock","message","Cards","history","useHistory","query","URLSearchParams","location","search","pokemon","configure","apiKey","cards","setCards","pokemonTypes","setPokemonTypes","pokemonSubtypes","setPokemonSubtypes","isLoaded","setIsLoaded","get","chosenType","setChosenType","chosenSubtype","setChosenSubtype","filteredCards","setFilteredCards","pageCount","setPageCount","activePage","setActivePage","activeModal","setActiveModal","setServerError","all","then","types","catch","subtypes","where","pageSize","response","console","log","data","Math","round","totalCount","finally","q","push","length","Pagination","count","showFirstButton","showLastButton","Header","isBackLink","goBack","Main","CardDetail","cardId","useParams","setData","find","supertype","join","attacks","flavorText","App","localStorage","getItem","authorizationStatus","setAuthorizationStatus","loginHandler","checkCode","OTR","Promise","resolve","reject","setTimeout","err","error","smsCodeHandler","setItem","Auth","exact","path","render","removeItem","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aca9b365.chunk.js","sourcesContent":["export const AuthorizationStatus = {\r\n    NO_AUTH: `NO_AUTH`,\r\n    AUTH: `AUTH`,\r\n};\r\n\r\nexport const ERROR_MESSAGES = {\r\n    empty_field: 'Поле должно быть заполнено.',\r\n    incorrect_authorization: 'Неверный логин или пароль.',\r\n    incorrect_sms_code: 'Неверный код'\r\n};\r\n\r\nexport const FORM_NAME = {\r\n    LOGIN: 'LOGIN',\r\n    CODE: 'CODE'\r\n};\r\n\r\nexport const POKEMON_API_KEY = '1cf24b30-3606-41ab-9abd-fc96dbcd39bf';\r\n","import React from 'react';\r\nimport { ERROR_MESSAGES } from '../../const';\r\n\r\nconst FormLogin = ({ isAuthorizationSuccess, submitForm, handleChange, errors }) => {\r\n    return (\r\n        <form className=\"form\" onSubmit={ submitForm }>\r\n            { !isAuthorizationSuccess && <p className=\"form__error\">{ ERROR_MESSAGES.incorrect_authorization }</p> }\r\n\r\n            <div className=\"form__block\">\r\n                <label className={ errors[\"login\"] && \"is-invalid\" }>\r\n                    <span>Login</span>\r\n                    <input\r\n                        name=\"login\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter login\"\r\n                        onChange={ handleChange }\r\n                    />\r\n                </label>\r\n                { errors[\"login\"] && <div className=\"form__block-error\">{ errors[\"login\"] }</div> }\r\n            </div>\r\n\r\n            <div className=\"form__block\">\r\n                <label className={ errors[\"password\"] && \"is-invalid\" }>\r\n                    <span>Login</span>\r\n                    <input\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter password\"\r\n                        onChange={ handleChange }\r\n                    />\r\n                </label>\r\n\r\n                { errors[\"password\"] && <div className=\"form__block-error\">{ errors[\"password\"] }</div> }\r\n            </div>\r\n\r\n            <button className=\"button\" type=\"submit\">Log in</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FormLogin;\r\n","import React from 'react';\r\n\r\nconst FormSmsCode = ({ handleChange, submitForm, errors }) => {\r\n    return (\r\n        <form className=\"form\" onSubmit={ submitForm }>\r\n            <div className=\"form__block\">\r\n                <label className={ errors[\"code\"] && \"is-invalid\" }>\r\n                    <span>Code from SMS</span>\r\n                    <input\r\n                        name=\"code\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter code\"\r\n                        onChange={ handleChange }\r\n                    />\r\n                </label>\r\n                { errors[\"code\"] && <div className=\"form__block-error\">{ errors[\"code\"] }</div> }\r\n            </div>\r\n\r\n            <button className=\"button\" type=\"submit\">Send</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default FormSmsCode;\r\n","import React, {useEffect, useState} from 'react';\r\nimport FormLogin from '../FormLogin/FormLogin';\r\nimport './Authorization.css';\r\nimport FormSmsCode from '../FormSmsCode/FormSmsCode';\r\nimport { ERROR_MESSAGES, FORM_NAME } from '../../const';\r\n\r\nconst Authorization = ({ onLoginFormSubmit, onCodeFormSubmit, serverError }) => {\r\n    const [isAuthorizationSuccess, setIsAuthorizationSuccess] = useState(true);\r\n    const [showCodeForm, setShowCodeForm] = useState(false);\r\n\r\n    const [state, setState] = useState({\r\n        fields: {},\r\n        errors: {}\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (serverError) {\r\n            setState(prevState => ({\r\n                ...prevState,\r\n                errors: {}\r\n            }))\r\n        }\r\n    }, [serverError]);\r\n\r\n    const handleValidation = (formName) => {\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        switch (formName) {\r\n            case FORM_NAME.LOGIN:\r\n                if (!state.fields.login) {\r\n                    formIsValid = false;\r\n                    errors['login'] = ERROR_MESSAGES.empty_field;\r\n                }\r\n\r\n                if (!state.fields.password) {\r\n                    formIsValid = false;\r\n                    errors['password'] = ERROR_MESSAGES.empty_field;\r\n                }\r\n\r\n                break;\r\n\r\n            case FORM_NAME.CODE:\r\n                if (!state.fields.code) {\r\n                    formIsValid = false;\r\n                    errors['code'] = ERROR_MESSAGES.empty_field;\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setState({ ...state, errors: errors });\r\n        return formIsValid;\r\n    };\r\n\r\n    const loginSubmit = (evt) => {\r\n        evt.preventDefault();\r\n\r\n        if (handleValidation(FORM_NAME.LOGIN)) {\r\n            if (onLoginFormSubmit(state.fields)) {\r\n                setShowCodeForm(true);\r\n                alert('Valid SMS code: 123456');\r\n            } else {\r\n                setIsAuthorizationSuccess(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const codeSubmit = async (evt) => {\r\n        evt.preventDefault();\r\n\r\n        if(handleValidation(FORM_NAME.CODE)) {\r\n            const isValidCode = await onCodeFormSubmit(state.fields.login, state.fields.code);\r\n\r\n            if (!isValidCode) {\r\n                setState({ ...state, errors: {\r\n                        code: ERROR_MESSAGES.incorrect_sms_code\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleChange = (evt) => {\r\n        let fields = state.fields;\r\n        fields[evt.target.name] = evt.target.value;\r\n        setState({ fields, errors: {\r\n                ...state.errors,\r\n                [evt.target.name]: null\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"auth\">\r\n            <div className=\"container\">\r\n                { serverError && <p className=\"text-danger\">Ошибка сервера: {serverError}</p> }\r\n\r\n                { showCodeForm\r\n                    ? <FormSmsCode handleChange={ handleChange } submitForm={ codeSubmit } errors={ state.errors } />\r\n                    : <FormLogin isAuthorizationSuccess={ isAuthorizationSuccess } handleChange={ handleChange } submitForm={ loginSubmit } errors={ state.errors } />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Authorization;\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <CircularProgress color=\"primary\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport './Select.css';\r\nimport cx from 'classnames';\r\n\r\nconst Select = ({title = 'Type', items = [], onSelect, activeItem = ''}) => {\r\n    const [selectOpened, setSelectOpened] = useState(false);\r\n    const [selectValue, setSelectValue] = useState(activeItem);\r\n    const [filteredItems, setFilteredItems] = useState(items);\r\n    const searchInputEl = useRef();\r\n    const selectEl = useRef();\r\n\r\n    useEffect(() => {\r\n        const handleClickOutside = (evt) => {\r\n            if(selectEl.current && !selectEl.current.contains(evt.target)) {\r\n                setSelectOpened(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('click', handleClickOutside);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setFilteredItems(items);\r\n        searchInputEl.current.value = '';\r\n    }, [selectOpened]);\r\n\r\n    const handlerOpenSelect = () => {\r\n        setSelectOpened(!selectOpened);\r\n    };\r\n\r\n    const handlerChooseItem = (value) => {\r\n        if(selectValue === value) {\r\n            setSelectValue('');\r\n        } else {\r\n            setSelectValue(value);\r\n        }\r\n\r\n        setSelectOpened(false);\r\n        onSelect(selectValue === value ? '' : value);\r\n    };\r\n\r\n    const handlerSearch = (evt) => {\r\n        const value = evt.target.value.toLowerCase();\r\n        const newItems = items.filter(item => item.toLowerCase().indexOf(value) > -1);\r\n\r\n        if (value !== '') {\r\n            setFilteredItems(newItems);\r\n        } else {\r\n            setFilteredItems(items);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div ref={selectEl} className={cx('select my-5', {'select--open': selectOpened})}>\r\n            <div className=\"select__header\" onClick={handlerOpenSelect}>\r\n                <span>{ selectValue ? selectValue : title }</span>\r\n\r\n            </div>\r\n            <div className=\"select__body\">\r\n                <div className=\"select__search\">\r\n                    <input ref={searchInputEl} onInput={(evt) => handlerSearch(evt)} placeholder=\"Type something...\" />\r\n                </div>\r\n                <div className=\"select__list\">\r\n                    { filteredItems.map(item => (\r\n                        <a\r\n                            key={item}\r\n                            className={cx('select__item', {'select__item--active': item === selectValue})}\r\n                            onClick={() => handlerChooseItem(item)}\r\n                        >{ item }</a>\r\n                    )) }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Select;\r\n","import React from 'react';\r\nimport './CardItem.css';\r\nimport cx from 'classnames';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst CardItem = ({ className, card, handlerClickCard }) => {\r\n    const handlerClickDetail = (evt) => {\r\n        evt.stopPropagation();\r\n    };\r\n\r\n    return (\r\n        <div className={cx(className, {'card-item': true})} tabIndex={0} onClick={ handlerClickCard } >\r\n            <div className=\"card-item__image\">\r\n                <img src={card.images?.small} alt={card.name} />\r\n            </div>\r\n\r\n            <div className=\"card-item__info\">\r\n                <p>{card.name}</p>\r\n                <p> {card.artist}</p>\r\n            </div>\r\n\r\n            <div className=\"card-item__controls\">\r\n                <Link onClick={ handlerClickDetail } to={`/cards/${card.id}`} className=\"card-item__button\">\r\n                    Go to detail page\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardItem;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport './ModalCard.css';\r\nimport cx from 'classnames';\r\n\r\nconst ModalCard = ({ card, handlerCloseModal }) => {\r\n    const { name, images } = card;\r\n\r\n    const ModalWrapper = useRef();\r\n\r\n    const [modalShow, setModalShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setModalShow(true);\r\n\r\n        const handleClickOutside = (evt) => {\r\n            if(ModalWrapper.current && !ModalWrapper.current.contains(evt.target)) {\r\n                setModalShow(false);\r\n                handlerCloseModal();\r\n            }\r\n        };\r\n\r\n        document.addEventListener('click', handleClickOutside);\r\n    }, []);\r\n\r\n  return (\r\n      <div className=\"modal-card\">\r\n          <div className={cx(\"modal-card__wrapper\", {'modal-card__wrapper--show': modalShow})} ref={ ModalWrapper }>\r\n              <div className=\"modal-card__header\">\r\n                  <p className=\"modal-card__title\">{ name }</p>\r\n                  <button className=\"modal-card__close\" type=\"button\" onClick={ handlerCloseModal }>\r\n                      <span>Close modal</span>\r\n                  </button>\r\n              </div>\r\n              <div className=\"modal-card__body\">\r\n                  <img src={ images.large } alt={ name } />\r\n              </div>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default ModalCard;\r\n","export const getQueryForCards = (type, subtype) => {\r\n    return type && subtype\r\n        ? `types:${type} subtypes:${subtype}`\r\n        : type ? `types:${type}` :  subtype && `subtypes:${subtype}`;\r\n};\r\n\r\nexport const setSearchParams = (currentType, currentSubtype, currentPage) => {\r\n    const type = currentType && `type=${currentType}&`;\r\n    const subtype = currentSubtype && `subtype=${currentSubtype}&`;\r\n    const page = currentPage && `page=${currentPage}`;\r\n\r\n    return `?${type}${subtype}${page}`;\r\n};\r\n","import React from 'react';\r\nimport './ErrorBlock.css';\r\n\r\nconst ErrorBlock = ({ message }) => {\r\n    return (\r\n        <div className=\"error-block\">\r\n            <p>{ message }</p>\r\n\r\n            <img src=\"/images/cry.gif\" alt=\"sticker\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorBlock;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Loader from '../Loader/Loader';\r\nimport Select from '../Select/Select';\r\nimport './Cards.css';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport CardItem from '../CardItem/CardItem';\r\nimport ModalCard from '../ModalCard/ModalCard';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getQueryForCards, setSearchParams } from '../../utils';\r\nimport ErrorBlock from '../ErrorBlock/ErrorBlock';\r\nimport pokemon from 'pokemontcgsdk';\r\nimport { POKEMON_API_KEY } from '../../const';\r\n\r\nconst Cards = () => {\r\n    let history = useHistory();\r\n    const query = new URLSearchParams(history.location.search);\r\n\r\n    pokemon.configure({apiKey: POKEMON_API_KEY});\r\n\r\n    const [cards, setCards] = useState([]);\r\n    const [pokemonTypes, setPokemonTypes] = useState([]);\r\n    const [pokemonSubtypes, setPokemonSubtypes] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [chosenType, setChosenType] = useState(query.get('type') ?? '');\r\n    const [chosenSubtype, setChosenSubtype] = useState(query.get('subtype') ?? '');\r\n    const [filteredCards, setFilteredCards] = useState(cards);\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [activePage, setActivePage] = useState(+query.get('page') ?? 1);\r\n    const [activeModal, setActiveModal] = useState(null);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        pokemon.type.all()\r\n            .then(types => {\r\n                setPokemonTypes(types);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            });\r\n\r\n        pokemon.subtype.all()\r\n            .then(subtypes => {\r\n                setPokemonSubtypes(subtypes);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            });\r\n\r\n        pokemon.card.where({ pageSize: 4, page: 1 })\r\n            .then(response => {\r\n                console.log(response);\r\n                setCards(response.data);\r\n                setFilteredCards(response.data);\r\n                setPageCount(Math.round(response.totalCount / response.pageSize));\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            })\r\n            .finally(() => setIsLoaded(true));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let query = getQueryForCards(chosenType, chosenSubtype);\r\n\r\n        pokemon.card.where({ pageSize: 4, page: 1, q: query })\r\n            .then(response => {\r\n                setFilteredCards(response.data);\r\n                setPageCount(Math.round(response.totalCount / response.pageSize));\r\n                setActivePage(1);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            });\r\n\r\n        history.push(`/cards${ setSearchParams(chosenType, chosenSubtype, activePage) }`);\r\n    }, [chosenType, chosenSubtype]);\r\n\r\n    useEffect(() => {\r\n        let query = getQueryForCards(chosenType, chosenSubtype);\r\n\r\n        pokemon.card.where({ pageSize: 4, page: activePage, q: query })\r\n            .then(response => {\r\n                setCards(response.data);\r\n                setFilteredCards(response.data);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            });\r\n\r\n        history.push(`/cards${ setSearchParams(chosenType, chosenSubtype, activePage) }`);\r\n    }, [activePage]);\r\n\r\n    const handlerSelectType = (value) => {\r\n        setChosenType(value);\r\n    };\r\n\r\n    const handlerSelectSubtype = (value) => {\r\n        setChosenSubtype(value);\r\n    };\r\n\r\n    const handlerPageClick = (evt, currentPage) => {\r\n        evt.preventDefault();\r\n        setActivePage(currentPage);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {!isLoaded\r\n                ?\r\n                <Loader />\r\n                :\r\n\r\n                <>\r\n                { serverError\r\n                    ? <ErrorBlock message=\"Не удалось загрузить карточки. Попробуйте перезагрузить страницу.\" />\r\n                    :\r\n                    <div className=\"cards\">\r\n                        <div className=\"cards__filter\">\r\n                            { pokemonTypes.length && (\r\n                                <Select title=\"Type\" items={ pokemonTypes } onSelect={ handlerSelectType } activeItem={ chosenType } />\r\n                            )}\r\n\r\n                            { pokemonSubtypes.length && (\r\n                                <Select title=\"Subtype\" items={ pokemonSubtypes } onSelect={ handlerSelectSubtype } activeItem={ chosenSubtype } />\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"cards__wrapper\">\r\n                            <div className=\"cards__list\">\r\n                                { filteredCards.map(card => (\r\n                                    <CardItem\r\n                                        className=\"cards__item\"\r\n                                        key={card.id}\r\n                                        card={card}\r\n                                        handlerClickCard={ () => setActiveModal(card) }\r\n                                    />\r\n                                ))}\r\n\r\n                                { !filteredCards.length && <p>Pokemons not found by this filter</p> }\r\n                            </div>\r\n\r\n                            { pageCount > 1 && (\r\n                                <Pagination\r\n                                    page={ activePage }\r\n                                    onChange={ handlerPageClick }\r\n                                    count={ pageCount }\r\n                                    showFirstButton showLastButton\r\n                                />\r\n                            ) }\r\n                        </div>\r\n                    </div>\r\n\r\n                }\r\n                </>\r\n\r\n            }\r\n\r\n            { activeModal && <ModalCard card={ activeModal } handlerCloseModal={ () => setActiveModal(null) } /> }\r\n            </>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './Header.css';\r\n\r\nconst Header = ({ isBackLink = false }) => {\r\n    let history = useHistory();\r\n\r\n    const handlerClickBack = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <div className=\"header__nav\">\r\n                    { isBackLink && <button type=\"button\" onClick={ handlerClickBack }>&lt; Back</button> }\r\n\r\n                    <Link className=\"ml-auto\" to=\"/logout\">Logout</Link>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Main.css';\r\nimport Cards from '../Cards/Cards';\r\nimport Header from '../Header/Header';\r\n\r\nconst Main = () => {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <main>\r\n                <div className=\"container\">\r\n                    <Cards />\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Header from '../Header/Header';\r\nimport { useParams } from 'react-router-dom';\r\nimport './CardDetail.css';\r\nimport Loader from '../Loader/Loader';\r\nimport ErrorBlock from '../ErrorBlock/ErrorBlock';\r\nimport pokemon from 'pokemontcgsdk';\r\nimport { POKEMON_API_KEY } from '../../const';\r\n\r\nconst CardDetail = () => {\r\n    let { cardId } = useParams();\r\n    const [data, setData] = useState({});\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    pokemon.configure({apiKey: POKEMON_API_KEY});\r\n\r\n    useEffect(() => {\r\n        pokemon.card.find(cardId)\r\n            .then(card => {\r\n                console.log(card);\r\n                setData(card);\r\n            })\r\n            .catch(() => {\r\n                setServerError(true);\r\n            })\r\n            .finally(() => {\r\n                setIsLoaded(true);\r\n            });\r\n    }, [cardId]);\r\n\r\n    return (\r\n        <>\r\n            <Header isBackLink={ true } />\r\n\r\n            <>\r\n                { !isLoaded\r\n                    ?\r\n                    <Loader />\r\n                    :\r\n\r\n                    <>\r\n                        { serverError\r\n                            ? <ErrorBlock message=\"Не удалось загрузить детальную информацию. Попробуйте перезагрузить страницу.\"/>\r\n                            :\r\n                            <main>\r\n                                <div className=\"container\">\r\n                                    <div className=\"card-detail\">\r\n                                        <p className=\"card-detail__title\">{data.name}</p>\r\n\r\n                                        <div className=\"card-detail__block\">\r\n                                            <div className=\"card-detail__image\">\r\n                                                <img src={data.images?.large} alt={data.name} />\r\n                                            </div>\r\n                                        </div>\r\n\r\n\r\n                                        <div className=\"card-detail__block\">\r\n                                            <div className=\"card-detail__info\">\r\n                                                <p>Pokemon name: <b>{data.name}</b></p>\r\n                                                <p>Supertype: <b>{data.supertype}</b></p>\r\n                                                <p>Types: <b>{data.types?.join(', ')}</b></p>\r\n                                                <p>Subtypes: <b>{data.subtypes?.join(', ')}</b></p>\r\n                                            </div>\r\n\r\n                                            { data.attacks?.length && (\r\n                                                <div className=\"card-detail__info\">\r\n                                                    <ul>\r\n                                                        { data.attacks?.map(item => <li key={item.name}><b>{item.name}</b></li>) }\r\n                                                    </ul>\r\n                                                </div>\r\n                                            )}\r\n\r\n                                            <p className=\"card-detail__description\">{data.flavorText}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </main>\r\n                        }\r\n                    </>\r\n                }\r\n            </>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CardDetail;\r\n","import React, {useState} from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect} from 'react-router-dom';\r\nimport './App.css';\r\nimport Authorization from '../Authorization/Authorization';\r\nimport { AuthorizationStatus } from '../../const';\r\nimport Main from '../Main/Main';\r\nimport CardDetail from '../CardDetail/CardDetail';\r\n\r\nconst App = () => {\r\n    const [authorizationStatus, setAuthorizationStatus] = useState(\r\n        localStorage.getItem('pokemonAuthorization') ? AuthorizationStatus.AUTH : AuthorizationStatus.NO_AUTH\r\n    );\r\n\r\n    const [serverError, setServerError] = useState(null);\r\n\r\n    const loginHandler = ({ login, password }) => {\r\n        return login === 'kode@kode.ru' && password === 'Enk0deng';\r\n    };\r\n\r\n    const checkCode = async () => {\r\n        let code = null;\r\n\r\n        let OTR = new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                resolve({ data: '123456' });\r\n                // reject(\"Server error\");\r\n            }, 250);\r\n        });\r\n\r\n        await OTR.then(response => {\r\n            code = response.data;\r\n            setServerError(null);\r\n        })\r\n            .catch(err => {\r\n                console.error(err);\r\n                setServerError(err);\r\n            });\r\n\r\n        return code;\r\n    };\r\n\r\n    const smsCodeHandler = async (login, code) => {\r\n        let getCode = await checkCode(code);\r\n\r\n        if (getCode === code) {\r\n            localStorage.setItem('pokemonAuthorization', login);\r\n            setAuthorizationStatus(AuthorizationStatus.AUTH);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const Auth = () => {\r\n        return <Authorization onLoginFormSubmit={ loginHandler } onCodeFormSubmit={ smsCodeHandler } serverError={ serverError } />\r\n    };\r\n\r\n    const renderLogoutPage = () => {\r\n        localStorage.removeItem('pokemonAuthorization');\r\n        setAuthorizationStatus(AuthorizationStatus.NO_AUTH);\r\n\r\n        return <Redirect to='/' />;\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/\"\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Redirect to=\"/login\" />\r\n                                : <Redirect to=\"/cards\" />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/login'\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Auth />\r\n                                : <Redirect to='/cards' />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/logout'\r\n                        render={ renderLogoutPage }\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/cards'\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Redirect to='/login' />\r\n                                : <Main />;\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path='/cards/:cardId'\r\n                        render={() => {\r\n                            return authorizationStatus !== AuthorizationStatus.AUTH\r\n                                ? <Redirect to='/login' />\r\n                                : <CardDetail />;\r\n                        }}\r\n                    />\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}